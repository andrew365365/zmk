/*                KEY POSITIONS

  ╭─────────────────────╮ ╭─────────────────────╮
  │ LT4 LT3 LT2 LT1 LT0 │ │ RT0 RT1 RT2 RT3 RT4 │
  │ LM4 LM3 LM2 LM1 LM0 │ │ RM0 RM1 RM2 RM3 RM4 │
  │ LB4 LB3 LB2 LB1 LB0 │ │ RB0 RB1 RB2 RB3 RB4 │
  ╰───────╮ LH2 LH1 LH0 │ │ RH0 RH1 RH2 ╭───────╯
          ╰─────────────╯ ╰─────────────╯ */

// use require-prior-idle-ms for combos
#undef COMBO_HOOK
#define COMBO_HOOK require-prior-idle-ms = <150>;


/ {
  combos {
    compatible = "zmk,combos";

    combo_esc{
      timeout-ms = <50>;
      key-positions = <LT3 LT2>;
      bindings = <&kp ESC>;
    };

    combo_equal {
      timeout-ms = <50>;
      key-positions = <RM0 RM1>;
      bindings = <&kp EQUAL>;
      layers = <DEF>;
    };

    combo_lbkt {
      timeout-ms = <50>;
      key-positions = <RT1 RM1>;
      bindings = <&kp LBKT>;
      layers = <DEF>;
    };

    combo_rbkt {
      timeout-ms = <50>;
      key-positions = <RT3 RM3>;
      bindings = <&kp RBKT>;
      layers = <DEF>;
    };

    combo_lbrc {
      timeout-ms = <50>;
      key-positions = <RT1 RT2>;
      bindings = <&kp LBRC>;
      layers = <DEF>;
    };

    combo_rbrc {
      timeout-ms = <50>;
      key-positions = <RT2 RT3>;
      bindings = <&kp RBRC>;
      layers = <DEF>;
    };

    combo_lpar {
      timeout-ms = <50>;
      key-positions = <RM1 RM2>;
      bindings = <&kp LPAR>;
      layers = <DEF>;
    };

    combo_rpar {
      timeout-ms = <50>;
      key-positions = <RM2 RM3>;
      bindings = <&kp RPAR>;
      layers = <DEF>;
    };
  };
};

#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30

/* Horizontal combos - left hand */
ZMK_COMBO(plus,  &kp PLUS,      LT0 LT1,     DEF, COMBO_TERM_SLOW)
ZMK_COMBO(minus, &kp MINUS,     LB0 LB1,     DEF, COMBO_TERM_SLOW)
/* Horizontal combos - right hand */
ZMK_COMBO(pipe,  &kp PIPE,      RB0 RB1,     DEF, COMBO_TERM_SLOW)
ZMK_COMBO(amps,  &kp AMPS,      RT0 RT1,     DEF, COMBO_TERM_SLOW)
ZMK_COMBO(bslh,  &kp BSLH,      RB1 RB2,     DEF, COMBO_TERM_SLOW)
ZMK_COMBO(fslh,  &kp FSLH,      RB2 RB3,     DEF, COMBO_TERM_SLOW)

/* Vertical combos - left hand */
ZMK_COMBO(at,    &kp AT,        LT3 LM3,     DEF  NUM, COMBO_TERM_SLOW)
ZMK_COMBO(hash,  &kp HASH,      LT2 LM2,     DEF  NUM, COMBO_TERM_SLOW)
ZMK_COMBO(dllr,  &kp DLLR,      LT1 LM1,     DEF  NUM, COMBO_TERM_SLOW)
ZMK_COMBO(prcnt, &kp PRCNT,     LT0 LM0,     DEF  NUM, COMBO_TERM_SLOW)
ZMK_COMBO(grave, &kp GRAVE,     LM3 LB3,     DEF  NUM, COMBO_TERM_SLOW)
ZMK_COMBO(equal, &kp EQUAL,     LM1 LB1,     DEF  NUM, COMBO_TERM_SLOW)
ZMK_COMBO(tilde, &kp TILDE,     LM0 LB0,     DEF  NUM, COMBO_TERM_SLOW)

/* Vertical combos - right hand */
ZMK_COMBO(caret, &kp CARET,     RT0 RM0,     DEF, COMBO_TERM_SLOW)
ZMK_COMBO(star,  &kp STAR,      RT2 RM2,     DEF, COMBO_TERM_SLOW)
ZMK_COMBO(under, &kp UNDER,     RM0 RB0,     DEF, COMBO_TERM_SLOW)


